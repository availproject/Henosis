// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{VERIFIER_ELF, VERIFIER_ID};
use risc0_zkvm::{compute_image_id, serde::to_vec, Receipt};
use std::time::{Duration, Instant};
use hex;
use bincode;
use anyhow::Result;
use bonsai_sdk::alpha as bonsai_sdk;

fn main() {
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let input_data: u64 = 10;
  
    let url = "url".to_string();
    let api_key = "api_key".to_string();
    let client = bonsai_sdk::Client::from_parts(url, api_key, risc0_zkvm::VERSION)
        .expect("Failed to construct sdk client");

    let image_id = hex::encode(compute_image_id(VERIFIER_ELF).unwrap());
    client.upload_img(&image_id, VERIFIER_ELF.to_vec()).unwrap();

    println!("Image ID: {}", image_id);

    // Prepare input data and upload it.
    let input_data = to_vec(&input_data).unwrap();
    let input_data = bytemuck::cast_slice(&input_data).to_vec();
    let input_id = client.upload_input(input_data).unwrap();

    // Add a list of assumptions
    let assumptions: Vec<String> = vec![];

    let proving_and_conversion_start_time = Instant::now();
    // Start a session running the prover
    let session = client.create_session(image_id, input_id, assumptions).unwrap();
    loop {
        let res = session.status(&client).unwrap();
        if res.status == "RUNNING" {
            eprintln!(
                "Current status: {} - state: {} - continue polling...",
                res.status,
                res.state.unwrap_or_default()
            );
            std::thread::sleep(Duration::from_secs(15));
            continue;
        }
        if res.status == "SUCCEEDED" {
            // Download the receipt, containing the output
            let receipt_url = res
                .receipt_url
                .expect("API error, missing receipt on completed session");

            let receipt_buf = client.download(&receipt_url).unwrap();
            let receipt: Receipt = bincode::deserialize(&receipt_buf).unwrap();
            receipt
                .verify(VERIFIER_ID)
                .expect("Receipt verification failed");
        } else {
            panic!(
                "Workflow exited: {} - | err: {}",
                res.status,
                res.error_msg.unwrap_or_default()
            );
        }

        break;
    }

    let snark_session = client.create_snark(session.uuid).unwrap();
    eprintln!("Created snark session: {}", snark_session.uuid);
    loop {
        let res = snark_session.status(&client).unwrap();
        match res.status.as_str() {
            "RUNNING" => {
                eprintln!("Current status: {} - continue polling...", res.status,);
                std::thread::sleep(Duration::from_secs(15));
                continue;
            }
            "SUCCEEDED" => {
                let snark_receipt = res.output;
                eprintln!("Snark proof!: {snark_receipt:?}");
                break;
            }
            _ => {
                panic!(
                    "Workflow exited: {} err: {}",
                    res.status,
                    res.error_msg.unwrap_or_default()
                );
            }
        }
    }

    let proving_and_conversion_end_time = Instant::now();
    let elapsed_time = proving_and_conversion_end_time.duration_since(proving_and_conversion_start_time);
    println!(
        "Time Taken {:?}",
        elapsed_time.as_secs_f64()
    );
}
